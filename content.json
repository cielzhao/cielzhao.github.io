[{"title":"js数组去重的方法","date":"2018-03-01T15:41:15.000Z","path":"2018/03/01/js数组去重的方法/","text":"方法一（利用indexOf判断，有两种方案）123456789//若要ie8以下浏览器支持数组的indexOf方法，先对其进行兼容。Array.prototype.indexOf = Array.prototype.indexOf || function(val) &#123; for(var i = 0; i &lt; this.length; i++) &#123; if(this[i] === val) &#123; return i; &#125; &#125; return -1;&#125; 1.利用indexOf的返回值判断是否存在123456789101112//遍历数组，创建一个新数组，利用indexOf判断新数组中是否存在该值，不存在则push到新数组中，最后返回新数组function arrRemoveRepeat(arr) &#123; var newArr = []; for(var i = 0; i &lt; arr.length; i++) &#123; if(newArr.indexOf(arr[i]) === -1) &#123; newArr.push(arr[i]); &#125; &#125; return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 2.利用indexOf的返回值判断是否等于索引值123456789101112//遍历数组，创建一个新数组，利用indexOf判断该值在数组中首次出现的位置是否等于当前索引值，相等则push到新数组中，最后返回新数组function arrRemoveRepeat(arr) &#123; var newArr = []; for(var i = 0; i &lt; arr.length; i++) &#123; if(arr.indexOf(arr[i]) === i) &#123; newArr.push(arr[i]); &#125; &#125; return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 方法二（对象键值对法） 123456789101112131415161718//创建新的对象和数组，遍历传入数组时判断值是否为新对象的键值function arrRemoveRepeat(arr) &#123; var temp = &#123;&#125;, newArr = [], val, type; for(var i = 0; i &lt; arr.length; i++) &#123; val = arr[i]; type = typeof val; if(!temp[val]) &#123; temp[val] = [type]; newArr.push(val); &#125; else if(temp[val].indexOf(type) === -1) &#123; temp[val].push(type); newArr.push(val); &#125; &#125; return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 方法三（排序相邻比较法） 12345678910111213141516//排序数组，遍历时只push不与前一值重复的值，需要注意的是这样会改变原数组的顺序function arrRemoveRepeat(arr) &#123; arr.sort(function(a,b)&#123; return a - b; &#125;); var newArr = [arr[0]]; for(var i = 0; i &lt; arr.length; i++) &#123; if(arr[i] !== newArr[newArr.length-1]) &#123; newArr.push(arr[i]); &#125; &#125; return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 方法四（遍历数组法） 123456789101112131415//创建一个新数组，双层循环遍历数组，外层循环元素，内层循环比较值，若不相同则push进新数组function arrRemoveRepeat(arr) &#123; var newArr = []; for(var i = 0; i &lt; arr.length; i++) &#123; for(var j = i + 1; j &lt; arr.length; j++) &#123; if(arr[i] === arr[j]) &#123; j = ++ i; &#125; &#125; newArr.push(arr[i]); &#125; return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 方法五（利用ES6的set） 123456//Set数据结构，它类似于数组，其成员的值都是唯一的。利用Array.from将Set结构转换成数组function arrRemoveRepeat(arr) &#123; return Array.from(new Set(arr));&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36] 以上是js的几种数组去重方法，如果用的是jQuery，可以参考以下方法：123456789101112//jQuery中的$.inArray() 函数用于在数组中查找指定值，并返回它的索引值（如果没有找到，则返回-1）function arrRemoveRepeat(arr) &#123; var newArr = []; $.each(arr, function(i, el)&#123; if($.inArray(el, newArr) === -1) &#123; newArr.push(el); &#125; &#125;); return newArr;&#125;var arr = [21, 43, 15, 21, 36]; console.log(arrRemoveRepeat(arr)); //[21, 43, 15, 36]","tags":[{"name":"javascript","slug":"javascript","permalink":"http://cielzhao.com/tags/javascript/"}]},{"title":"圣诞节之后","date":"2017-12-26T15:58:18.000Z","path":"2017/12/26/圣诞节之后/","text":"有一年🎄，我收到了好多🍎。有一年🎄，我收到了一个🍎。今年的🎄，我收到了零个🍎。圣诞节之后，很快，又是新的一年了。","tags":[{"name":"小事","slug":"小事","permalink":"http://cielzhao.com/tags/小事/"}]},{"title":"Hexo博客主题Yilia更换Gitment评论系统","date":"2017-12-25T15:38:27.000Z","path":"2017/12/25/Hexo博客主题Yilia更换Gitment评论系统/","text":"搭建这个博客的时候本来用了友言评论系统，刚开始还可以使用，可是没过几天就打不开了，出现下面的报错信息，在线客服联系不上，进到友言微博里看到很久没有更新过动态，也不知道有没有在继续维护。 还是稍微有些强迫症，总觉得没有评论的话这个博客不是很完整。于是又在网上搜了很多相关信息，找到了 Gitment 这个解决方案；虽然 Gitment 只能使用 GitHub 账号进行评论，但是基本可以满足需求。然后发现 yilia 主题的_config.yml文件里本来就有对应 Gitment 的配置项。。。应该是刚开始的时候没注意到这个地方，找到的教程时间比较早，当时 yilia 主题配置项里还没有加上 Gitment，所以教程里也没有对应的配置步骤。这个，，，真的是绕了一大圈啊😂。 Gitment 是作者实现的一款基于 GitHub Issues 的评论系统，这是作者的个人博客，里边有详细的使用教程和相关问题说明。因为是基于 GitHub Issues 的，所以需要注册 OAuth Application ，如果注册时对需要填写的信息不是特别清楚，可以参考 csdn 上的 Gitment 这篇文章进行注册。整个过程非常简单，几分钟就能搞定。 最后放一个测试成功的截图吧。","tags":[{"name":"关于博客","slug":"关于博客","permalink":"http://cielzhao.com/tags/关于博客/"}]},{"title":"D3.js学习笔记","date":"2017-12-21T15:39:59.000Z","path":"2017/12/21/D3-js学习笔记-0/","text":"项目中要用到 D3.js，个人也比较感兴趣，于是在空闲的时间开始学习，目前 D3.js 已经更新到了4.0版本，这是在网上找的 D3.js V4版本中文参考文档，还有这个D3.js 4.x 中文手册，里边的内容都很详细。 但是如果是想找入门级基础教程的话，推荐极客学院的 D3.js 入门教程，有实例和效果图，简单易懂，可以跟着自己实现一遍，不好的一点就是这个教程是 V3 版本的，其实最基础的部分都相差不多。还有十二月咖啡馆的这个教程。如果调用的是 V4 版本的 js，可能会出现一些问题，大多是因为新版本的 api 变动。有些在网上找到了答案，有些没有。在此先把遇到的问题记录下来，后面有进展了再更新。1.API变动 d3.svg.axis().scale(xScale).orient(“bottom”) -&gt; d3.axisBottom(xScale) ease(“bounce”) -&gt; ease(d3.easeBounce) d3.layout.pie() -&gt; d3.pie() d3.svg.arc() -&gt; d3.arc() d3.scale.category10() -&gt; d3.scaleOrdinal(d3.schemeCategory10) d3.layout.force() -&gt; d3.forceSimulation() 2.写法报错 attr({})一次赋值多个属性会报错，style({})一次修改多个样式的写法也会报错，挨个写不会出问题，attr().attr()；style().style()。","tags":[{"name":"D3","slug":"D3","permalink":"http://cielzhao.com/tags/D3/"}]},{"title":"position属性","date":"2017-12-18T13:34:25.000Z","path":"2017/12/18/position属性/","text":"position 属性在页面布局定位元素的时候会经常用到，自以为已经运用的很熟练，直到有一天发现对 relative 的理解居然有错，于是在 W3school 上重新看了一遍教程。在此记录一下自己的理解，加深印象。 position 属性规定元素的定位类型，可能的值有五个，分别是 static, inherit, relative, absolute, fixed。所有主流浏览器都支持 position 属性，但任何版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。 staticstatic 有静止的意思，顾名思义就是元素没有定位，这个属性值是 position 的默认值，一般很少给元素写出这个默认属性，但如果用 js 去获取 position 属性值的话会获取到值为 static。此时元素出现在正常的文档流中，top, bottom, left, right 或者 z-index 声明均会被忽略，没有效果。 relative生成相对定位的元素，相对于其正常位置进行定位。例如，”left:20” 会向元素的 left 位置添加 20 像素。 absolute生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 fixed生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 inherit规定应该从父元素继承 position 属性的值。 以上属性值对应的效果可以在 codepen 上自己进行调试。","tags":[{"name":"css","slug":"css","permalink":"http://cielzhao.com/tags/css/"}]},{"title":"Hello World","date":"2017-12-18T13:29:50.000Z","path":"2017/12/18/hello-world/","text":"一直想有一个自己的个人博客，虽然早早的申请了域名，写了一些静态页面，可自己不是设计出身，页面不是很好看，也就因此搁置了。直到前几天百度搜一个技术上遇到的问题，看到一个很好看的博客，就研究了一下，是用GithubPages+Hexo博客主题Yilia搭建的（请原谅我的无知，蓝朋友说他好几年前就知道hexo了😂）。进一步了解之后发现Hexo还有很多其他主题，一一看过之后觉得Yilia主题我个人更喜欢，这是作者的博客地址。 确定好主题之后就按照网上找的教程一步一步操作了，过程并不是很复杂，网上的教程已经足够详细，没打算再重新写一遍，我把我用到的教程列举如下： 廖雪峰的git教程 github关联域名 hexo从零开始到搭建完整 关于评论插件，之所以用友言，是因为没有其他选择了。其实更喜欢畅言的样式，yilia主题也支持配置，可无奈畅言需要域名备案，我是基于github搭建的，没打算买服务器，只能放弃。网上搜索其他方法，有人说可以随便找个已经备案的域名，通过审核之后再换成自己的就行，暂且不论是否可行，在未经许可的情况下用别人的备案域名总是不好的，于是放弃。后来发现有人用友言配置，评论功能也还行，果断注册使用。可以参考 Hexo + yilia 主题 +githubpages博客添加友言评论功能 这篇文章添加友言评论功能。 搭建完成之后，运行命令：1$ hexo server 在浏览器打开 http://localhost:4000 就能看到效果。然后继续运行命令：123$ hexo clean$ hexo generate$ hexo deploy （以上命令除了 hexo clean 之外都有简写，hexo加后一个单词的首字母即可）就可以同步到github，这时候打开域名就能看到完整效果。每次用命令同步到github上的文件只有yilia主题source目录下的文件： 其中的CNAME不是自动生成的，要单独加进去，不然的话直接打开域名就找不到页面了。 我搭建博客的时候是在公司电脑上同步到github的，等回到家里想做一些修改的时候就遇到了问题，因为得在自己的电脑上重新安装一遍。这时候可以参考 hexo：更换电脑，如何继续写博客 和 使用hexo，如果换了电脑怎么更新博客？ 来解决问题。 我是在github上新建了一个myblog仓库来备份源文件，里边包含yilia主题仓库，因为对于一个仓库包含另一个仓库的问题并不是很了解，上传到github后主题yilia文件无法点击查看详情，在本地修改之后也push不上去，一直报错，刚开始以为是文件出了问题，最后居然傻到把整个库删了重建，结果还是一样。后来找到相关文章【Git】子模块：一个仓库包含另一个仓库，解决了我的困惑。 不过最后用了另外一种方法，先fork了yilia主题，然后在其基础上修改提交，但这么做的前提是自己的博客themes文件夹下clone的是自己frok过来的主题，而不是原作者的。这么做可以省去在一个库里来回切换分支的操作，还是在蓝朋友的指导下完成的，在此非常感谢。 每次 “HelloWorld” 运行成功的时候，都是一个新的开始。","tags":[{"name":"关于博客","slug":"关于博客","permalink":"http://cielzhao.com/tags/关于博客/"}]}]